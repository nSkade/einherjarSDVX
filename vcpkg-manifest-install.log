Detecting compiler hash for triplet x64-windows...
All requested packages are currently installed.
Restored 0 package(s) from C:\Users\Admin\AppData\Local\vcpkg\archives in 313.6 us. Use --debug to see more details.
Total install time: 536.5 us
The package zlib is compatible with built-in CMake targets:

    find_package(ZLIB REQUIRED)
    target_link_libraries(main PRIVATE ZLIB::ZLIB)

curl provides CMake targets:

    # this is heuristically generated, and may not be correct
    find_package(CURL CONFIG REQUIRED)
    target_link_libraries(main PRIVATE CURL::libcurl)

freetype is compatible with built-in CMake targets:

    find_package(Freetype REQUIRED)
    target_link_libraries(main PRIVATE Freetype::Freetype) # since CMake 3.10

The package libiconv provides CMake targets:

    find_package(Iconv)
    target_link_libraries(main PRIVATE Iconv::Iconv)

The package libarchive is compatible with the CMake Find Module:

    find_package(LibArchive REQUIRED)
    target_include_directories(main PRIVATE ${LibArchive_INCLUDE_DIRS})
    target_link_libraries(main PRIVATE ${LibArchive_LIBRARIES})

    find_package(LibArchive REQUIRED)
    target_link_libraries(main PRIVATE LibArchive::LibArchive) # CMake >= 3.17

The package libjpeg-turbo is compatible with built-in CMake targets:

    find_package(JPEG REQUIRED)
    target_link_libraries(main PRIVATE ${JPEG_LIBRARIES})
    target_include_directories(main PRIVATE ${JPEG_INCLUDE_DIR})

The package libvorbis provides CMake targets:

    # Vorbis reference encoder and decoder, low-level API
    find_package(Vorbis CONFIG REQUIRED)
    target_link_libraries(main PRIVATE Vorbis::vorbis)

    # Audio stream decoding and basic manipulation, high-level API
    find_package(Vorbis CONFIG REQUIRED)
    target_link_libraries(main PRIVATE Vorbis::vorbisfile)

    # Convenience API for setting up an encoding environment
    find_package(Vorbis CONFIG REQUIRED)
    target_link_libraries(main PRIVATE Vorbis::vorbisenc)

sdl2 provides CMake targets:

    find_package(SDL2 CONFIG REQUIRED)
    target_link_libraries(main
        PRIVATE
        $<TARGET_NAME_IF_EXISTS:SDL2::SDL2main>
        $<IF:$<TARGET_EXISTS:SDL2::SDL2>,SDL2::SDL2,SDL2::SDL2-static>
    )

